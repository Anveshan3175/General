1.WebApplicationContext : 
    Each DispatcherServlet has its own WebApplicationContext (which extends the global context). It is referenced by  "contextConfigLocation" init parameter in servlet tag.Spring encourages encapsulation: beans that are "general purpose" and shared between multiple DispatcherServlets should live in the global context, where as beans that are only interacted with by your DispatcherServlet aren't shared. 
--------------------------------------------------------------
2. Root WebApplicationContext : 
    The root WebApplicationContext is created by the ContextLoader and contains all the beans defined in the configuration files referenced by "contextConfigLocation" CONTEXT parameter  (unless you provide an explicit alternative, this means WEB-INF/applicationContext.xml).   
   --> To create and initialize the root Web Application Context, we specify Spring’s ContextLoaderListener class in our web.xml file. The ContextLoaderListener’s <listener> element should be specified after the Log4jConfigListener’s <listener> element in your web.xml file if you have a Log4jConfigListener.
   
*** My understanding is that, Application Context in standalone Spring project == root Web Application Context in Spring MVC project 
--------------------------------------------------------------    
3. Standalone Spring application typically utilizes the ApplicationContext interface that gives us access to the beans in the Spring IoC container and also includes other functionality.
--------------------------------------------------------------
4. A Spring web application usually utilizes the WebApplicationContext interface that extends the ApplicationContext interface.Like a standard ApplicationContext, we can use a WebApplicationContext to retrieve beans from a Spring container.
--------------------------------------------------------------
5. When using XML configuration files in a Spring web application, the actual WebApplicationContext implementation class is the XmlWebApplicationContext class.
--------------------------------------------------------------
6.  Root 
    Web Application Context  -----> Services,DAO
    
    Displatcher Servlet 
    Web Application COntext  -----> Controllers
 -------------------------------------------------------------- 
 7. DispatcherServlet and the ContextLoaderListener both take contextConfigLocation values. However, in the case of the ContextLoaderListener, this is a <context-param>, whereas in the case of the DispatcherServlet, this is an <init-param>.
    -> Context Loader Listener will create only one (web) application context from multiple files in the web application. 
 --------------------------------------------------------------
8. If you have a simple Spring MVC application, you could even have a situation where you don’t have a root WebApplicationContext. A DispatcherServlet would still have its own WebApplicationContext, but it doesn’t actually need to have a parent root WebApplicationContext
--------------------------------------------------------------
9. Specify root Web application context in sring mvc
     <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/application-context*.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
     Web.xml can have only one <context-param>, so only one context object gets created when server loads an application and the data in     that context is shared among all resources (Ex: Servlets and JSPs)


References :
http://www.deroneriksson.com/tutorials/java/spring/introduction-to-the-spring-framework/configuring-root-web-application-context-in-spring-web-application
--------------------------------------------------------------
10. @COMPONENT
If we mark a class with @Component or one of the other Stereotype annotations these classes will be auto-detected using classpath scanning.
@Component - is generic and can be used across application.
@Service – annotate classes at service layer level.
@Controller – annotate classes at presentation layers level, mainly used in Spring MVC.
@Repository – annotate classes at persistence layer, which will act as database repository.
@Configuration - Indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime
@Bean - Indicates that a method produces a bean to be managed by the Spring container.

@Configuration : 
Annotating a class with the @Configuration annotation indicates that the class will be used by JavaConfig as a source of bean definitions. An application may make use of just one @Configuration-annotated class, or many. @Configuration can be considered the equivalent of XML's <beans/> element. Like <beans/>, it provides an opportunity to explicitly set defaults for all enclosed bean definitions.

@Bean
@Bean is a method-level annotation and a direct analog of the XML <bean/> element.
--------------------------------------------------------------
11. Spring-DAO   vs  Spring-JDBC  vs  Spring-ORM  vs  Spring-Data
https://stackoverflow.com/questions/24990400/spring-dao-vs-spring-orm-vs-spring-jdbc
 -> Spring DAO(Data Access Object): for database operations using DAO pattern. This is generalized concept to access JDBC and Hibernate, iBatis, JPA, JDO using it's individual Support classes. And it provides generalized exception hierarchy by defining @Repository annotation 
 -> Spring-JDBC provides the JdbcTemplate class, that removes plumbing code and helps you concentrate on the SQL query and parameters. You just need to configure it with a DataSource
 -> Spring-ORM is an umbrella module that covers many persistence technologies, namely JPA, JDO, Hibernate and iBatis.For each technology, the configuration basically consists in injecting a DataSource bean into some kind of SessionFactory or EntityManagerFactory etc. bean. For pure JDBC, there's no need for such integration classes (apart from JdbcTemplate), as JDBC only relies on a DataSource.
 -> Spring-Data is an umbrella project that provides a common API to define how to access data (DAO + annotations) in a more generic way, covering both SQL and NOSQL data sources.
-------------------------------------------------------------- 
12.DriverManagerDataSource doesn't provide pooling, use for testing purposes only. straight from the docs
    - http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#jdbc-introduction
    
--------------------------------------------------------------    
13.Generate service classes from wsdl
wsimport -s . -p com.baeldung.jaxws.server.topdown employeeservicetopdown.wsdl
Command line options used: -p specifies the target package. -s specifies where to put the generated source files.
--------------------------------------------------------------
14. @EnableTransactionManagement and <tx:annotation-driven/> only looks for @Transactional on beans in the same application context they are defined in. This means that, if you put annotation driven configuration in a WebApplicationContext for a DispatcherServlet, it only checks for @Transactional beans in your controllers, and not your services.
--------------------------------------------------------------
15. TO avoid connection pool create datasource from DriverManagerDataSource
    TO create connection pool from Apache DBCP create datasource from BasicDataSource
    
    @Bean
	public DataSource dataSource() {
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName(env.getRequiredProperty("jdbc.driverClassName"));
		dataSource.setUrl(env.getRequiredProperty("jdbc.url"));
		dataSource.setUsername(env.getRequiredProperty("jdbc.username"));
		dataSource.setPassword(env.getRequiredProperty("jdbc.password"));
		return dataSource;
	}
--------------------------------------------------------------	
16. JSP files in a directory under the 'WEB-INF' directory so there can be no direct access by clients
--------------------------------------------------------------
17. Difference between using @Bean and @Component to define beans

You have two ways to generate beans. One is to create a class with an annotation @Component. The other is to create a method and annotate it with @Bean. For those classes containing method with @Bean should be annotated with @Configuration Once you run your spring project, the class with a @ComponentScan annotation would scan every class with @Component on it, and restore the instance of this class to the Ioc Container. Another thing the @ComponentScan would do is running the methods with @Bean on it and restore the return object to the Ioc Container as a bean. So when you need to decide which kind of beans you want to create depending upon current states, you need to use @Bean. You can write the logic and return the object you want. Another thing worth to mention is the name of the method with @Bean is the default name of bean.


1. -> @Component (@Controller and @Service and @Repository) are used to auto-detect and auto-configure beans using classpath scanning.
   -> @Bean is used to explicitly declare a single bean, rather than letting Spring do it automatically
   
2. -> @Component :  There's an implicit one-to-one mapping between the annotated class and the bean (i.e. one bean per class). 
   -> @Bean : It decouples the declaration of the bean from the class definition, and lets you create and configure beans exactly 
      how you choose.
3. -> @Component : This stereotype annotation is  class level annotations.
   -> @Bean : This stereotype annotation is method level annotations.
   
4. -> Control  of wiring is quite limited with this approach, since it's purely declarative

		@Controller
		public class HomeController {
		    public String home(){
			return "Hello, World!";
		    }
		}
    -> We have a little more control over how the bean is defined
    
    		@Configuration
		public class ApplicationConfig {
		    @Bean
		    public User superUser() {            // Name of bean = superUser = name of method
			return new User("Dan","Vega");   //  See we can put in any constructor in here. we have control
		    }
		}
        The name of the method is actually going to be the name of our bean
	
	
      -> @Component auto detects and configures the beans using classpath scanning whereas @Bean explicitly declares a single 
         bean,  rather than letting Spring do it automatically.
      -> @Component does not decouple the declaration of the bean from the class definition where as @Bean decouples the declaration 
         of the bean from the class definition.
      -> @Component is a class level annotation where as @Bean is a method level annotation and name of the method serves as the 
         bean name.
      -> @Component need not to be used with the @Configuration annotation where as @Bean annotation has to be used within the 
         class which is annotated with @Configuration.
      -> We cannot create a bean of a class using @Component, if the class is outside spring container whereas we can create a bean 
         of a class using @Bean even if the class is present outside the spring container.
      -> @Component has different specializations like @Controller, @Repository and @Service whereas @Bean has no specializations.
      
      
      -> @Component Preferable for component scanning and automatic wiring.
         When should you use @Bean?
         Sometimes automatic configuration is not an option. When? Let's imagine that you want to wire components from 3rd-party 
         libraries (you don't have the source code so you can't annotate its classes with @Component), so automatic configuration is 
         not possible.
         The @Bean annotation returns an object that spring should register as bean in application context. The body of the method 
         bears the logic responsible for creating the instance.
      
         Let's consider I want specific implementation depending on some dynamic state. @Bean is perfect for that case.
      
		@Bean
		@Scope("prototype")
		public SomeService someService() {
		    switch (state) {
		    case 1:
			return new Impl1();
		    case 2:
			return new Impl2();
		    case 3:
			return new Impl3();
		    default:
			return new Impl();
		    }
		}
	However there is no way to do that with @Component.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
