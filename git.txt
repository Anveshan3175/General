User Name : Anveshan3175/Katrinakaif1

**************************************************************************************
https://www.siteground.com/tutorials/git/commands.htm
Install Git with Apt :
sudo apt-get update
sudo apt-get install git

Set Up Git:
git config --global user.name "Your Name"
git config --global user.email "youremail@domain.com"
Create a repository in the Github without readme.md, then you will see below commands
    echo "# TestGIT" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git remote add origin https://github.com/Anveshan3175/TestGIT.git
    git push -u origin master


Searches related to how to install git on ubuntu
how to install git on linux
how to use git on ubuntu
github
setup git on ubuntu
ubuntu git package
setup git server ubuntu
ubuntu git clone
git-core
Searches related to github on ubuntu
mac os install git
how to use github ubuntu
how to setup github
how to use github linux
github generate keys
git setup linux
git install
git bash
### If changes are made in remote repository and also in local repository, then you cannot merge local changes
as they are. First you need to checkout file (be careful to take backup as changes will be lost)
git checkout FirstFile.txt
Then do 
git pull
Then make changes again
and then make local changes and push it to origin

Resolve conflicts
1.Modify file after conflicts
2.git add
3.git commit -m "comments"
4.git push -u origin master

git reset --merge
git rm --cached [file]   (remove file from staging)
git reset HEAD <file>
**************************************************************************************
CLONE REPOSITORY INTO ECLIPSE

1. Open GIT perspective in eclipse
2. GIT repositories tab
3. Click on "Clone a GIT repositry and add the clone to this view
4. In "Select Repository Source" window, select "Clone URL"
5. Give credentials and clone URL copied from GIT website
6. Finish
7. Open Java perspective in the eclipse.(If the project is Java project)
8. File -> Import -> Git -> Projects from GIT ->  Existing local repository -> select the java project from local repository -> Select the project Name -> Finish import.
9. To update changes from GIT repo, use pull request.
10. To commit changes from local eclipse to GIT repository,
    select Project -> Team -> commit -> Go to GIT staging window -> Commit and Push
11. If there is any issue while pushing, revert local changes, take update gtom repo, make changes and then push again.


Another way
1. Create New repository in the GIT HUB.
2. Open GIT perspective in eclipse
3. GIT repositories tab
4. Click on "Clone a GIT repositry and add the clone to this view
5. In "Select Repository Source" window, select "Clone URL"
6. Give credentials and clone URL copied from GIT website
7. Finish
8. Create Java project in the eclipse
9. Select the Java Project and right click and share project
10. Select the repository and finish it.

Ref : https://www.youtube.com/watch?v=cdsMIX9gB94


Add second project to existing repository
1. Create a project in the eclipse
2. Right click on the project and click on share the project
3. Select existing repository in the local machine.(When you select existing repo, it will go as another project)
4. Right click the project, in the Team option, click on commit.
5. Give credentials to complete the process.

****************************************************************************************************************
https://www.youtube.com/watch?v=HVsySz-h9r4               best one for intro
https://www.youtube.com/watch?v=FdZecVxzJbk

How to work with GIT in ubuntu
------------------------------

 1. In the home directory, create folder "gitrepos" . This wil act as container for all git repositories.
Now we try to clone one repository from Github and work on it. So Github, here is remote.
 2. For the TestGIT repo present in the Github, create clone in the local.
    -> In the girrepos, create folder "TestGIT" (the name shouold match with the remote repo name. In here the
    folder name should match with the repo name in the Github
    -> Go to TestGIT and execte the clone command. This will download all files from remote and create local remote
 
 mkdir gitrepos
 cd gitrepos
 mkdir TestGIT
 cd TestGIT
 git clone https://github.com/Anveshan3175/TestGIT.git .    --- create and track the project locally
 git status

 3. Make chages in local master and commit them and push them.
    -> Make changes in one of the files and save them
    -> Create one file which is not needed to be pushed to remote (to demo use of git ignore). In here all .bk can 
       be ignored.
    
 gedit FirstFile.txt
 touch FirstFile.txt.bk
 git status             --- This will show one modified file and one new bk file
 touch .gitignore
 gedit .gitignore       --- Add *.bk in the ignore file
 git status             --- This will show modified file & '.gitignore' but not the '.bk' file 
                            The '.gitignore' file is to be committed.
 git add -A             --- Adds all the files to the stage    
 git commit -m "modif.."--- Commit files to local master repo. Give proper message as comment
 git log                --- To check all logs
 git commit --amend -m "another.."  --- This is to rectify the last comment
 git status             --- This will tell us that local master is ahead of remote master by one commit
 git pull origin master --- If there any changes in the remote master, pul them to local first and then push 
                            your changes to remote
 git push origin master --- Send canges in local master to remote master
 
 4. Try conflict scenarioes
    -> Make canges to file in local master. MAke changes to same file in remote. Try to push the file from local 
       to remote.
 Modify FirstFile.txt in the Github
 gedit FirstFile.txt     --- Make canges in this file and save it
 git status              --- shows modified changes which are not staged/untracked
 git add -A
 git status              --- Added teh modified file to staging
 git commit -m "modi..." --- Commit the file to local repo
 git pull origin master  --- Here "origin" is name of remote and "msater" is name of branch.
                             Now conflict message is thrown
 Open FirstFile.txt and resolve all conflicts. You can see conflicts which are marked in the file.
 git add FirstFile.txt
 git commit -m "commit after resolve..."  --- commits to staging area after resoultion of conflicts
 git pull origin master   --- It will be successfull
 git push origin master   --- It will be successfull
                            
       
 
 
                            
                         
 
 
 Revert file to state that is last pulled from repo
 --------------------------------------------------
 git pull origin master   --- Recommended when there are no changes in your local
 git pull --rebase        --- Recommended when there are local changes
 gedit FirstFile.txt      --- Make changes in the file
 git status               --- Displays untracked changes in the FirstFile.txt
 git diff                 --- Shows differences in the file FirstFile.txt
 
 1. Now you want feel changes are gibberish. You want to undo all changes and reinstate the file to it initial version that is pulled from repository
 
 git checkout FirstFile.txt --- checkout command does reinstation
 git status                 --- Now working directory is clean
 git diff                   --- doesn't show any differences
 git log --stat
 git stash                  ---  Current changes willl be stashed with id which can be retrieved later


simple conflict scenario
-------------------------
1.pull update from remote master
2.Make changes in local master
3.Make changes in remote master
4.Stage changes in local master
5.commit changes in local master
6.Push changes to remote master and you will see error. You cannot push since there are updates in master
7.Pull changes from remote master
8.You see all the conflicts.Open the files having conflicts and make changes
9.Stage and commit the changes to local master
10.Push the changes to the remote master







Other Commands:
---------------
git clean -df             --- removes all untracked files and directories
git log                   --- Shows all commits information
git log stat              --- Shows details of commits
git reset soft <hascode>  --- reset master branch to any of old state which is recognized by hashcode of commit
git reset <hascode>       --- soft: new and old untracked files will be in stage. Default :Will be in working repo
git reset hard <hascode>  --- hard : new will be in Working repo, old files wil be reinstated to that version
git cherry-pick <hashcode> --- changes the state of the branch to that of state of master representd by hashcode.
git commit --amend        --- add files to previous commit


Use projects from Github in eclipse 
-----------------------------------
1. Find out the repository which you want clone and work
2. Create folder with same name as repository. For ex: when I wanted to work with Spring projects
   mkdir /home/anvesh/gitrepos/Spring
3. Goto that folder so that you can initiate clone
   cd /home/anvesh/gitrepos/Spring
4. Do git clone.Use Github repo url and destination as current directory
   git clone https://github.com/Anveshan3175/Spring.git .
5. Check all projects in the repository are cloned into local or not.
   ls
   git status   --- This should tell that all projects are up to date
6. Open eclipse and ensure GIT is installed in it. Open GIT view
7. Now do "Add an existing local Git Repository to thi view" 
8. In the "Add Git Repositories", Browse the "local Git Spring master" which we have created in step 4
9. Now in the "Git Repositories" view, under "Working Tree", select the project you want to work with, right click
   and select "Import Projects".
10.In the "Import Project..", select "Finish". 
11. Open java perspective and you can see project you want to work with.
12. In the eclipse, you don't have to cange maven settings. You can see settings.xml file and maven repositories
    by checking in the Windows -> Prepferences - > Maven
13. For the project which you have imported, you can run pom.xml and see if you are able to install war.
14. If you want to add anything to .gitignore.do it so that they can be ignored while you want to stage and commit.
    trackApp/.gitignore
15. Use git init to initialize git repository at later point




**************************************************************************************
